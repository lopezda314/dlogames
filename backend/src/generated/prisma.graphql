# source: https://us1.prisma.sh/david-lopez-fcf066/dlogames/dev
# timestamp: Sun Mar 29 2020 00:53:20 GMT-0400 (Eastern Daylight Time)

type AggregateDlonamesClue {
  count: Int!
}

type AggregateDlonamesGame {
  count: Int!
}

type AggregateDlonamesPerClueStats {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type DlonamesClue implements Node {
  id: ID!
  game: DlonamesGame!
  codemaster: String!
  numCluesGiven: Int!
  clue: String!
  numGuesses: Int!
}

"""A connection to a list of items."""
type DlonamesClueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DlonamesClueEdge]!
  aggregate: AggregateDlonamesClue!
}

input DlonamesClueCreateInput {
  id: ID
  codemaster: String!
  numCluesGiven: Int!
  clue: String!
  numGuesses: Int!
  game: DlonamesGameCreateOneInput!
}

input DlonamesClueCreateOneInput {
  create: DlonamesClueCreateInput
  connect: DlonamesClueWhereUniqueInput
}

"""An edge in a connection."""
type DlonamesClueEdge {
  """The item at the end of the edge."""
  node: DlonamesClue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DlonamesClueOrderByInput {
  id_ASC
  id_DESC
  codemaster_ASC
  codemaster_DESC
  numCluesGiven_ASC
  numCluesGiven_DESC
  clue_ASC
  clue_DESC
  numGuesses_ASC
  numGuesses_DESC
}

type DlonamesCluePreviousValues {
  id: ID!
  codemaster: String!
  numCluesGiven: Int!
  clue: String!
  numGuesses: Int!
}

type DlonamesClueSubscriptionPayload {
  mutation: MutationType!
  node: DlonamesClue
  updatedFields: [String!]
  previousValues: DlonamesCluePreviousValues
}

input DlonamesClueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DlonamesClueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DlonamesClueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DlonamesClueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DlonamesClueWhereInput
}

input DlonamesClueUpdateDataInput {
  codemaster: String
  numCluesGiven: Int
  clue: String
  numGuesses: Int
  game: DlonamesGameUpdateOneRequiredInput
}

input DlonamesClueUpdateInput {
  codemaster: String
  numCluesGiven: Int
  clue: String
  numGuesses: Int
  game: DlonamesGameUpdateOneRequiredInput
}

input DlonamesClueUpdateManyMutationInput {
  codemaster: String
  numCluesGiven: Int
  clue: String
  numGuesses: Int
}

input DlonamesClueUpdateOneRequiredInput {
  create: DlonamesClueCreateInput
  connect: DlonamesClueWhereUniqueInput
  update: DlonamesClueUpdateDataInput
  upsert: DlonamesClueUpsertNestedInput
}

input DlonamesClueUpsertNestedInput {
  update: DlonamesClueUpdateDataInput!
  create: DlonamesClueCreateInput!
}

input DlonamesClueWhereInput {
  """Logical AND on all given filters."""
  AND: [DlonamesClueWhereInput!]

  """Logical OR on all given filters."""
  OR: [DlonamesClueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DlonamesClueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  codemaster: String

  """All values that are not equal to given value."""
  codemaster_not: String

  """All values that are contained in given list."""
  codemaster_in: [String!]

  """All values that are not contained in given list."""
  codemaster_not_in: [String!]

  """All values less than the given value."""
  codemaster_lt: String

  """All values less than or equal the given value."""
  codemaster_lte: String

  """All values greater than the given value."""
  codemaster_gt: String

  """All values greater than or equal the given value."""
  codemaster_gte: String

  """All values containing the given string."""
  codemaster_contains: String

  """All values not containing the given string."""
  codemaster_not_contains: String

  """All values starting with the given string."""
  codemaster_starts_with: String

  """All values not starting with the given string."""
  codemaster_not_starts_with: String

  """All values ending with the given string."""
  codemaster_ends_with: String

  """All values not ending with the given string."""
  codemaster_not_ends_with: String
  numCluesGiven: Int

  """All values that are not equal to given value."""
  numCluesGiven_not: Int

  """All values that are contained in given list."""
  numCluesGiven_in: [Int!]

  """All values that are not contained in given list."""
  numCluesGiven_not_in: [Int!]

  """All values less than the given value."""
  numCluesGiven_lt: Int

  """All values less than or equal the given value."""
  numCluesGiven_lte: Int

  """All values greater than the given value."""
  numCluesGiven_gt: Int

  """All values greater than or equal the given value."""
  numCluesGiven_gte: Int
  clue: String

  """All values that are not equal to given value."""
  clue_not: String

  """All values that are contained in given list."""
  clue_in: [String!]

  """All values that are not contained in given list."""
  clue_not_in: [String!]

  """All values less than the given value."""
  clue_lt: String

  """All values less than or equal the given value."""
  clue_lte: String

  """All values greater than the given value."""
  clue_gt: String

  """All values greater than or equal the given value."""
  clue_gte: String

  """All values containing the given string."""
  clue_contains: String

  """All values not containing the given string."""
  clue_not_contains: String

  """All values starting with the given string."""
  clue_starts_with: String

  """All values not starting with the given string."""
  clue_not_starts_with: String

  """All values ending with the given string."""
  clue_ends_with: String

  """All values not ending with the given string."""
  clue_not_ends_with: String
  numGuesses: Int

  """All values that are not equal to given value."""
  numGuesses_not: Int

  """All values that are contained in given list."""
  numGuesses_in: [Int!]

  """All values that are not contained in given list."""
  numGuesses_not_in: [Int!]

  """All values less than the given value."""
  numGuesses_lt: Int

  """All values less than or equal the given value."""
  numGuesses_lte: Int

  """All values greater than the given value."""
  numGuesses_gt: Int

  """All values greater than or equal the given value."""
  numGuesses_gte: Int
  game: DlonamesGameWhereInput
}

input DlonamesClueWhereUniqueInput {
  id: ID
}

type DlonamesGame implements Node {
  id: ID!
  blueTeam: [String!]!
  blueCodemaster: String!
  redTeam: [String!]!
  redCodemaster: String!
  currentTeam: String!
  winningTeam: String
  clue: String
  blueClues: [String!]!
  redClues: [String!]!
  numGuesses: Int
  wordsGuessed: [String!]!
  words: [String!]!
  redWords: [String!]!
  blueWords: [String!]!
  deathWord: String!
  gameIsFinished: Boolean!
}

"""A connection to a list of items."""
type DlonamesGameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DlonamesGameEdge]!
  aggregate: AggregateDlonamesGame!
}

input DlonamesGameCreateblueCluesInput {
  set: [String!]
}

input DlonamesGameCreateblueTeamInput {
  set: [String!]
}

input DlonamesGameCreateblueWordsInput {
  set: [String!]
}

input DlonamesGameCreateInput {
  id: ID
  blueCodemaster: String!
  redCodemaster: String!
  currentTeam: String!
  winningTeam: String
  clue: String
  numGuesses: Int
  deathWord: String!
  gameIsFinished: Boolean!
  blueTeam: DlonamesGameCreateblueTeamInput
  redTeam: DlonamesGameCreateredTeamInput
  blueClues: DlonamesGameCreateblueCluesInput
  redClues: DlonamesGameCreateredCluesInput
  wordsGuessed: DlonamesGameCreatewordsGuessedInput
  words: DlonamesGameCreatewordsInput
  redWords: DlonamesGameCreateredWordsInput
  blueWords: DlonamesGameCreateblueWordsInput
}

input DlonamesGameCreateOneInput {
  create: DlonamesGameCreateInput
  connect: DlonamesGameWhereUniqueInput
}

input DlonamesGameCreateredCluesInput {
  set: [String!]
}

input DlonamesGameCreateredTeamInput {
  set: [String!]
}

input DlonamesGameCreateredWordsInput {
  set: [String!]
}

input DlonamesGameCreatewordsGuessedInput {
  set: [String!]
}

input DlonamesGameCreatewordsInput {
  set: [String!]
}

"""An edge in a connection."""
type DlonamesGameEdge {
  """The item at the end of the edge."""
  node: DlonamesGame!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DlonamesGameOrderByInput {
  id_ASC
  id_DESC
  blueCodemaster_ASC
  blueCodemaster_DESC
  redCodemaster_ASC
  redCodemaster_DESC
  currentTeam_ASC
  currentTeam_DESC
  winningTeam_ASC
  winningTeam_DESC
  clue_ASC
  clue_DESC
  numGuesses_ASC
  numGuesses_DESC
  deathWord_ASC
  deathWord_DESC
  gameIsFinished_ASC
  gameIsFinished_DESC
}

type DlonamesGamePreviousValues {
  id: ID!
  blueTeam: [String!]!
  blueCodemaster: String!
  redTeam: [String!]!
  redCodemaster: String!
  currentTeam: String!
  winningTeam: String
  clue: String
  blueClues: [String!]!
  redClues: [String!]!
  numGuesses: Int
  wordsGuessed: [String!]!
  words: [String!]!
  redWords: [String!]!
  blueWords: [String!]!
  deathWord: String!
  gameIsFinished: Boolean!
}

type DlonamesGameSubscriptionPayload {
  mutation: MutationType!
  node: DlonamesGame
  updatedFields: [String!]
  previousValues: DlonamesGamePreviousValues
}

input DlonamesGameSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DlonamesGameSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DlonamesGameSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DlonamesGameSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DlonamesGameWhereInput
}

input DlonamesGameUpdateblueCluesInput {
  set: [String!]
}

input DlonamesGameUpdateblueTeamInput {
  set: [String!]
}

input DlonamesGameUpdateblueWordsInput {
  set: [String!]
}

input DlonamesGameUpdateDataInput {
  blueCodemaster: String
  redCodemaster: String
  currentTeam: String
  winningTeam: String
  clue: String
  numGuesses: Int
  deathWord: String
  gameIsFinished: Boolean
  blueTeam: DlonamesGameUpdateblueTeamInput
  redTeam: DlonamesGameUpdateredTeamInput
  blueClues: DlonamesGameUpdateblueCluesInput
  redClues: DlonamesGameUpdateredCluesInput
  wordsGuessed: DlonamesGameUpdatewordsGuessedInput
  words: DlonamesGameUpdatewordsInput
  redWords: DlonamesGameUpdateredWordsInput
  blueWords: DlonamesGameUpdateblueWordsInput
}

input DlonamesGameUpdateInput {
  blueCodemaster: String
  redCodemaster: String
  currentTeam: String
  winningTeam: String
  clue: String
  numGuesses: Int
  deathWord: String
  gameIsFinished: Boolean
  blueTeam: DlonamesGameUpdateblueTeamInput
  redTeam: DlonamesGameUpdateredTeamInput
  blueClues: DlonamesGameUpdateblueCluesInput
  redClues: DlonamesGameUpdateredCluesInput
  wordsGuessed: DlonamesGameUpdatewordsGuessedInput
  words: DlonamesGameUpdatewordsInput
  redWords: DlonamesGameUpdateredWordsInput
  blueWords: DlonamesGameUpdateblueWordsInput
}

input DlonamesGameUpdateManyMutationInput {
  blueCodemaster: String
  redCodemaster: String
  currentTeam: String
  winningTeam: String
  clue: String
  numGuesses: Int
  deathWord: String
  gameIsFinished: Boolean
  blueTeam: DlonamesGameUpdateblueTeamInput
  redTeam: DlonamesGameUpdateredTeamInput
  blueClues: DlonamesGameUpdateblueCluesInput
  redClues: DlonamesGameUpdateredCluesInput
  wordsGuessed: DlonamesGameUpdatewordsGuessedInput
  words: DlonamesGameUpdatewordsInput
  redWords: DlonamesGameUpdateredWordsInput
  blueWords: DlonamesGameUpdateblueWordsInput
}

input DlonamesGameUpdateOneRequiredInput {
  create: DlonamesGameCreateInput
  connect: DlonamesGameWhereUniqueInput
  update: DlonamesGameUpdateDataInput
  upsert: DlonamesGameUpsertNestedInput
}

input DlonamesGameUpdateredCluesInput {
  set: [String!]
}

input DlonamesGameUpdateredTeamInput {
  set: [String!]
}

input DlonamesGameUpdateredWordsInput {
  set: [String!]
}

input DlonamesGameUpdatewordsGuessedInput {
  set: [String!]
}

input DlonamesGameUpdatewordsInput {
  set: [String!]
}

input DlonamesGameUpsertNestedInput {
  update: DlonamesGameUpdateDataInput!
  create: DlonamesGameCreateInput!
}

input DlonamesGameWhereInput {
  """Logical AND on all given filters."""
  AND: [DlonamesGameWhereInput!]

  """Logical OR on all given filters."""
  OR: [DlonamesGameWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DlonamesGameWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  blueCodemaster: String

  """All values that are not equal to given value."""
  blueCodemaster_not: String

  """All values that are contained in given list."""
  blueCodemaster_in: [String!]

  """All values that are not contained in given list."""
  blueCodemaster_not_in: [String!]

  """All values less than the given value."""
  blueCodemaster_lt: String

  """All values less than or equal the given value."""
  blueCodemaster_lte: String

  """All values greater than the given value."""
  blueCodemaster_gt: String

  """All values greater than or equal the given value."""
  blueCodemaster_gte: String

  """All values containing the given string."""
  blueCodemaster_contains: String

  """All values not containing the given string."""
  blueCodemaster_not_contains: String

  """All values starting with the given string."""
  blueCodemaster_starts_with: String

  """All values not starting with the given string."""
  blueCodemaster_not_starts_with: String

  """All values ending with the given string."""
  blueCodemaster_ends_with: String

  """All values not ending with the given string."""
  blueCodemaster_not_ends_with: String
  redCodemaster: String

  """All values that are not equal to given value."""
  redCodemaster_not: String

  """All values that are contained in given list."""
  redCodemaster_in: [String!]

  """All values that are not contained in given list."""
  redCodemaster_not_in: [String!]

  """All values less than the given value."""
  redCodemaster_lt: String

  """All values less than or equal the given value."""
  redCodemaster_lte: String

  """All values greater than the given value."""
  redCodemaster_gt: String

  """All values greater than or equal the given value."""
  redCodemaster_gte: String

  """All values containing the given string."""
  redCodemaster_contains: String

  """All values not containing the given string."""
  redCodemaster_not_contains: String

  """All values starting with the given string."""
  redCodemaster_starts_with: String

  """All values not starting with the given string."""
  redCodemaster_not_starts_with: String

  """All values ending with the given string."""
  redCodemaster_ends_with: String

  """All values not ending with the given string."""
  redCodemaster_not_ends_with: String
  currentTeam: String

  """All values that are not equal to given value."""
  currentTeam_not: String

  """All values that are contained in given list."""
  currentTeam_in: [String!]

  """All values that are not contained in given list."""
  currentTeam_not_in: [String!]

  """All values less than the given value."""
  currentTeam_lt: String

  """All values less than or equal the given value."""
  currentTeam_lte: String

  """All values greater than the given value."""
  currentTeam_gt: String

  """All values greater than or equal the given value."""
  currentTeam_gte: String

  """All values containing the given string."""
  currentTeam_contains: String

  """All values not containing the given string."""
  currentTeam_not_contains: String

  """All values starting with the given string."""
  currentTeam_starts_with: String

  """All values not starting with the given string."""
  currentTeam_not_starts_with: String

  """All values ending with the given string."""
  currentTeam_ends_with: String

  """All values not ending with the given string."""
  currentTeam_not_ends_with: String
  winningTeam: String

  """All values that are not equal to given value."""
  winningTeam_not: String

  """All values that are contained in given list."""
  winningTeam_in: [String!]

  """All values that are not contained in given list."""
  winningTeam_not_in: [String!]

  """All values less than the given value."""
  winningTeam_lt: String

  """All values less than or equal the given value."""
  winningTeam_lte: String

  """All values greater than the given value."""
  winningTeam_gt: String

  """All values greater than or equal the given value."""
  winningTeam_gte: String

  """All values containing the given string."""
  winningTeam_contains: String

  """All values not containing the given string."""
  winningTeam_not_contains: String

  """All values starting with the given string."""
  winningTeam_starts_with: String

  """All values not starting with the given string."""
  winningTeam_not_starts_with: String

  """All values ending with the given string."""
  winningTeam_ends_with: String

  """All values not ending with the given string."""
  winningTeam_not_ends_with: String
  clue: String

  """All values that are not equal to given value."""
  clue_not: String

  """All values that are contained in given list."""
  clue_in: [String!]

  """All values that are not contained in given list."""
  clue_not_in: [String!]

  """All values less than the given value."""
  clue_lt: String

  """All values less than or equal the given value."""
  clue_lte: String

  """All values greater than the given value."""
  clue_gt: String

  """All values greater than or equal the given value."""
  clue_gte: String

  """All values containing the given string."""
  clue_contains: String

  """All values not containing the given string."""
  clue_not_contains: String

  """All values starting with the given string."""
  clue_starts_with: String

  """All values not starting with the given string."""
  clue_not_starts_with: String

  """All values ending with the given string."""
  clue_ends_with: String

  """All values not ending with the given string."""
  clue_not_ends_with: String
  numGuesses: Int

  """All values that are not equal to given value."""
  numGuesses_not: Int

  """All values that are contained in given list."""
  numGuesses_in: [Int!]

  """All values that are not contained in given list."""
  numGuesses_not_in: [Int!]

  """All values less than the given value."""
  numGuesses_lt: Int

  """All values less than or equal the given value."""
  numGuesses_lte: Int

  """All values greater than the given value."""
  numGuesses_gt: Int

  """All values greater than or equal the given value."""
  numGuesses_gte: Int
  deathWord: String

  """All values that are not equal to given value."""
  deathWord_not: String

  """All values that are contained in given list."""
  deathWord_in: [String!]

  """All values that are not contained in given list."""
  deathWord_not_in: [String!]

  """All values less than the given value."""
  deathWord_lt: String

  """All values less than or equal the given value."""
  deathWord_lte: String

  """All values greater than the given value."""
  deathWord_gt: String

  """All values greater than or equal the given value."""
  deathWord_gte: String

  """All values containing the given string."""
  deathWord_contains: String

  """All values not containing the given string."""
  deathWord_not_contains: String

  """All values starting with the given string."""
  deathWord_starts_with: String

  """All values not starting with the given string."""
  deathWord_not_starts_with: String

  """All values ending with the given string."""
  deathWord_ends_with: String

  """All values not ending with the given string."""
  deathWord_not_ends_with: String
  gameIsFinished: Boolean

  """All values that are not equal to given value."""
  gameIsFinished_not: Boolean
}

input DlonamesGameWhereUniqueInput {
  id: ID
}

type DlonamesPerClueStats implements Node {
  id: ID!
  clue: DlonamesClue!
  userCorrectGuesses: [String!]!
  incorrectGuess: String
  isHeroPlay: Boolean
  isVillainPlay: Boolean
}

"""A connection to a list of items."""
type DlonamesPerClueStatsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DlonamesPerClueStatsEdge]!
  aggregate: AggregateDlonamesPerClueStats!
}

input DlonamesPerClueStatsCreateInput {
  id: ID
  incorrectGuess: String
  isHeroPlay: Boolean
  isVillainPlay: Boolean
  userCorrectGuesses: DlonamesPerClueStatsCreateuserCorrectGuessesInput
  clue: DlonamesClueCreateOneInput!
}

input DlonamesPerClueStatsCreateManyInput {
  create: [DlonamesPerClueStatsCreateInput!]
  connect: [DlonamesPerClueStatsWhereUniqueInput!]
}

input DlonamesPerClueStatsCreateuserCorrectGuessesInput {
  set: [String!]
}

"""An edge in a connection."""
type DlonamesPerClueStatsEdge {
  """The item at the end of the edge."""
  node: DlonamesPerClueStats!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DlonamesPerClueStatsOrderByInput {
  id_ASC
  id_DESC
  incorrectGuess_ASC
  incorrectGuess_DESC
  isHeroPlay_ASC
  isHeroPlay_DESC
  isVillainPlay_ASC
  isVillainPlay_DESC
}

type DlonamesPerClueStatsPreviousValues {
  id: ID!
  userCorrectGuesses: [String!]!
  incorrectGuess: String
  isHeroPlay: Boolean
  isVillainPlay: Boolean
}

input DlonamesPerClueStatsScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DlonamesPerClueStatsScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DlonamesPerClueStatsScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DlonamesPerClueStatsScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  incorrectGuess: String

  """All values that are not equal to given value."""
  incorrectGuess_not: String

  """All values that are contained in given list."""
  incorrectGuess_in: [String!]

  """All values that are not contained in given list."""
  incorrectGuess_not_in: [String!]

  """All values less than the given value."""
  incorrectGuess_lt: String

  """All values less than or equal the given value."""
  incorrectGuess_lte: String

  """All values greater than the given value."""
  incorrectGuess_gt: String

  """All values greater than or equal the given value."""
  incorrectGuess_gte: String

  """All values containing the given string."""
  incorrectGuess_contains: String

  """All values not containing the given string."""
  incorrectGuess_not_contains: String

  """All values starting with the given string."""
  incorrectGuess_starts_with: String

  """All values not starting with the given string."""
  incorrectGuess_not_starts_with: String

  """All values ending with the given string."""
  incorrectGuess_ends_with: String

  """All values not ending with the given string."""
  incorrectGuess_not_ends_with: String
  isHeroPlay: Boolean

  """All values that are not equal to given value."""
  isHeroPlay_not: Boolean
  isVillainPlay: Boolean

  """All values that are not equal to given value."""
  isVillainPlay_not: Boolean
}

type DlonamesPerClueStatsSubscriptionPayload {
  mutation: MutationType!
  node: DlonamesPerClueStats
  updatedFields: [String!]
  previousValues: DlonamesPerClueStatsPreviousValues
}

input DlonamesPerClueStatsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DlonamesPerClueStatsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DlonamesPerClueStatsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DlonamesPerClueStatsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DlonamesPerClueStatsWhereInput
}

input DlonamesPerClueStatsUpdateDataInput {
  incorrectGuess: String
  isHeroPlay: Boolean
  isVillainPlay: Boolean
  userCorrectGuesses: DlonamesPerClueStatsUpdateuserCorrectGuessesInput
  clue: DlonamesClueUpdateOneRequiredInput
}

input DlonamesPerClueStatsUpdateInput {
  incorrectGuess: String
  isHeroPlay: Boolean
  isVillainPlay: Boolean
  userCorrectGuesses: DlonamesPerClueStatsUpdateuserCorrectGuessesInput
  clue: DlonamesClueUpdateOneRequiredInput
}

input DlonamesPerClueStatsUpdateManyDataInput {
  incorrectGuess: String
  isHeroPlay: Boolean
  isVillainPlay: Boolean
  userCorrectGuesses: DlonamesPerClueStatsUpdateuserCorrectGuessesInput
}

input DlonamesPerClueStatsUpdateManyInput {
  create: [DlonamesPerClueStatsCreateInput!]
  connect: [DlonamesPerClueStatsWhereUniqueInput!]
  set: [DlonamesPerClueStatsWhereUniqueInput!]
  disconnect: [DlonamesPerClueStatsWhereUniqueInput!]
  delete: [DlonamesPerClueStatsWhereUniqueInput!]
  update: [DlonamesPerClueStatsUpdateWithWhereUniqueNestedInput!]
  updateMany: [DlonamesPerClueStatsUpdateManyWithWhereNestedInput!]
  deleteMany: [DlonamesPerClueStatsScalarWhereInput!]
  upsert: [DlonamesPerClueStatsUpsertWithWhereUniqueNestedInput!]
}

input DlonamesPerClueStatsUpdateManyMutationInput {
  incorrectGuess: String
  isHeroPlay: Boolean
  isVillainPlay: Boolean
  userCorrectGuesses: DlonamesPerClueStatsUpdateuserCorrectGuessesInput
}

input DlonamesPerClueStatsUpdateManyWithWhereNestedInput {
  where: DlonamesPerClueStatsScalarWhereInput!
  data: DlonamesPerClueStatsUpdateManyDataInput!
}

input DlonamesPerClueStatsUpdateuserCorrectGuessesInput {
  set: [String!]
}

input DlonamesPerClueStatsUpdateWithWhereUniqueNestedInput {
  where: DlonamesPerClueStatsWhereUniqueInput!
  data: DlonamesPerClueStatsUpdateDataInput!
}

input DlonamesPerClueStatsUpsertWithWhereUniqueNestedInput {
  where: DlonamesPerClueStatsWhereUniqueInput!
  update: DlonamesPerClueStatsUpdateDataInput!
  create: DlonamesPerClueStatsCreateInput!
}

input DlonamesPerClueStatsWhereInput {
  """Logical AND on all given filters."""
  AND: [DlonamesPerClueStatsWhereInput!]

  """Logical OR on all given filters."""
  OR: [DlonamesPerClueStatsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DlonamesPerClueStatsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  incorrectGuess: String

  """All values that are not equal to given value."""
  incorrectGuess_not: String

  """All values that are contained in given list."""
  incorrectGuess_in: [String!]

  """All values that are not contained in given list."""
  incorrectGuess_not_in: [String!]

  """All values less than the given value."""
  incorrectGuess_lt: String

  """All values less than or equal the given value."""
  incorrectGuess_lte: String

  """All values greater than the given value."""
  incorrectGuess_gt: String

  """All values greater than or equal the given value."""
  incorrectGuess_gte: String

  """All values containing the given string."""
  incorrectGuess_contains: String

  """All values not containing the given string."""
  incorrectGuess_not_contains: String

  """All values starting with the given string."""
  incorrectGuess_starts_with: String

  """All values not starting with the given string."""
  incorrectGuess_not_starts_with: String

  """All values ending with the given string."""
  incorrectGuess_ends_with: String

  """All values not ending with the given string."""
  incorrectGuess_not_ends_with: String
  isHeroPlay: Boolean

  """All values that are not equal to given value."""
  isHeroPlay_not: Boolean
  isVillainPlay: Boolean

  """All values that are not equal to given value."""
  isVillainPlay_not: Boolean
  clue: DlonamesClueWhereInput
}

input DlonamesPerClueStatsWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createDlonamesGame(data: DlonamesGameCreateInput!): DlonamesGame!
  createDlonamesPerClueStats(data: DlonamesPerClueStatsCreateInput!): DlonamesPerClueStats!
  createDlonamesClue(data: DlonamesClueCreateInput!): DlonamesClue!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateDlonamesGame(data: DlonamesGameUpdateInput!, where: DlonamesGameWhereUniqueInput!): DlonamesGame
  updateDlonamesPerClueStats(data: DlonamesPerClueStatsUpdateInput!, where: DlonamesPerClueStatsWhereUniqueInput!): DlonamesPerClueStats
  updateDlonamesClue(data: DlonamesClueUpdateInput!, where: DlonamesClueWhereUniqueInput!): DlonamesClue
  deleteUser(where: UserWhereUniqueInput!): User
  deleteDlonamesGame(where: DlonamesGameWhereUniqueInput!): DlonamesGame
  deleteDlonamesPerClueStats(where: DlonamesPerClueStatsWhereUniqueInput!): DlonamesPerClueStats
  deleteDlonamesClue(where: DlonamesClueWhereUniqueInput!): DlonamesClue
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertDlonamesGame(where: DlonamesGameWhereUniqueInput!, create: DlonamesGameCreateInput!, update: DlonamesGameUpdateInput!): DlonamesGame!
  upsertDlonamesPerClueStats(where: DlonamesPerClueStatsWhereUniqueInput!, create: DlonamesPerClueStatsCreateInput!, update: DlonamesPerClueStatsUpdateInput!): DlonamesPerClueStats!
  upsertDlonamesClue(where: DlonamesClueWhereUniqueInput!, create: DlonamesClueCreateInput!, update: DlonamesClueUpdateInput!): DlonamesClue!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyDlonamesGames(data: DlonamesGameUpdateManyMutationInput!, where: DlonamesGameWhereInput): BatchPayload!
  updateManyDlonamesPerClueStatses(data: DlonamesPerClueStatsUpdateManyMutationInput!, where: DlonamesPerClueStatsWhereInput): BatchPayload!
  updateManyDlonamesClues(data: DlonamesClueUpdateManyMutationInput!, where: DlonamesClueWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyDlonamesGames(where: DlonamesGameWhereInput): BatchPayload!
  deleteManyDlonamesPerClueStatses(where: DlonamesPerClueStatsWhereInput): BatchPayload!
  deleteManyDlonamesClues(where: DlonamesClueWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  dlonamesGames(where: DlonamesGameWhereInput, orderBy: DlonamesGameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DlonamesGame]!
  dlonamesPerClueStatses(where: DlonamesPerClueStatsWhereInput, orderBy: DlonamesPerClueStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DlonamesPerClueStats]!
  dlonamesClues(where: DlonamesClueWhereInput, orderBy: DlonamesClueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DlonamesClue]!
  user(where: UserWhereUniqueInput!): User
  dlonamesGame(where: DlonamesGameWhereUniqueInput!): DlonamesGame
  dlonamesPerClueStats(where: DlonamesPerClueStatsWhereUniqueInput!): DlonamesPerClueStats
  dlonamesClue(where: DlonamesClueWhereUniqueInput!): DlonamesClue
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  dlonamesGamesConnection(where: DlonamesGameWhereInput, orderBy: DlonamesGameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DlonamesGameConnection!
  dlonamesPerClueStatsesConnection(where: DlonamesPerClueStatsWhereInput, orderBy: DlonamesPerClueStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DlonamesPerClueStatsConnection!
  dlonamesCluesConnection(where: DlonamesClueWhereInput, orderBy: DlonamesClueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DlonamesClueConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  dlonamesGame(where: DlonamesGameSubscriptionWhereInput): DlonamesGameSubscriptionPayload
  dlonamesPerClueStats(where: DlonamesPerClueStatsSubscriptionWhereInput): DlonamesPerClueStatsSubscriptionPayload
  dlonamesClue(where: DlonamesClueSubscriptionWhereInput): DlonamesClueSubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  passcode: String!
  dlonamesClueStats(where: DlonamesPerClueStatsWhereInput, orderBy: DlonamesPerClueStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DlonamesPerClueStats!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  passcode: String!
  dlonamesClueStats: DlonamesPerClueStatsCreateManyInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  passcode_ASC
  passcode_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  passcode: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  passcode: String
  dlonamesClueStats: DlonamesPerClueStatsUpdateManyInput
}

input UserUpdateManyMutationInput {
  username: String
  passcode: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  passcode: String

  """All values that are not equal to given value."""
  passcode_not: String

  """All values that are contained in given list."""
  passcode_in: [String!]

  """All values that are not contained in given list."""
  passcode_not_in: [String!]

  """All values less than the given value."""
  passcode_lt: String

  """All values less than or equal the given value."""
  passcode_lte: String

  """All values greater than the given value."""
  passcode_gt: String

  """All values greater than or equal the given value."""
  passcode_gte: String

  """All values containing the given string."""
  passcode_contains: String

  """All values not containing the given string."""
  passcode_not_contains: String

  """All values starting with the given string."""
  passcode_starts_with: String

  """All values not starting with the given string."""
  passcode_not_starts_with: String

  """All values ending with the given string."""
  passcode_ends_with: String

  """All values not ending with the given string."""
  passcode_not_ends_with: String
  dlonamesClueStats_every: DlonamesPerClueStatsWhereInput
  dlonamesClueStats_some: DlonamesPerClueStatsWhereInput
  dlonamesClueStats_none: DlonamesPerClueStatsWhereInput
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
